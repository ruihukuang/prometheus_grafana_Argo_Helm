name: Deploy to EKS

on:
 workflow_dispatch:
      
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
         aws-region: ${{ secrets.REGION }}

    - name: Check for Helm
      id: helm_check
      run: |
        if helm version > /dev/null 2>&1; then
          echo "Helm is already installed"
          echo "helm_installed=true" >> $GITHUB_ENV
        else
          echo "Helm is not installed"
          echo "helm_installed=false" >> $GITHUB_ENV
        fi

    - name: Install Helm
      if: env.helm_installed == 'false'
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

    - name: Get Bastion Host Public IP
      id: bastion_ip
      run: |
        bastion_ip=$(aws cloudformation describe-stacks --stack-name BastionHostStack --query "Stacks[0].Outputs[?OutputKey=='BastionPublicIP'].OutputValue" --output text)
        echo "::set-output name=ip::$bastion_ip"

    - name: Create SSH key file
      run: |
        echo "${{ secrets.SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: SSH to Bastion Host and Update Kubeconfig
      env:
        BASTION_IP: ${{ steps.bastion_ip.outputs.ip }}
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$BASTION_IP << EOF
          set -x  # Enable command tracing
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name MyEKSCluster
          kubectl get nodes
          #Install Argo CLI
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
          # create a Namespace for Argo CD
          kubectl create namespace argocd
          #install Argo CD in your EKS cluster
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          # Access the Argo CD API Server
           kubectl port-forward service/argocd-server -n argocd 8080:443
          #Retrieve Argo CD Admin Password
          export PASSWORD=$(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].metadata.name}')
          echo "::set-output name=password::$PASSWORD"
          #Update Argo CD Admin Password
          NEW_PASSWORD=${{ secrets.NEW_ARGOCD_PASSWORD }}
          argocd account update-password --current-password ${{ steps.retrieve-password.outputs.password }} --new-password $NEW_PASSWORD          
          #Create a Namespace for Prometheus and Grafana
          kubectl create namespace monitoring
          #Deploy Prometheus
          curl -O https://raw.githubusercontent.com/ruihukuang/prometheus_grafana_Argo_Helm/main/prometheus.yaml
          kubectl apply -f prometheus.yaml
          #Deploy Grafana
          curl -O https://raw.githubusercontent.com/ruihukuang/prometheus_grafana_Argo_Helm/main/grafana.yaml
          kubectl apply -f grafana.yaml
          #Access Grafana locally
          kubectl port-forward service/grafana 3000:80 -n monitoring
          #Install metrics-server
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl get deployment metrics-server -n kube-system
          kubectl top nodes
          kubectl top pods --all-namespaces
        EOF


   # log into localhost:8080 Open a web browser and navigate to http://localhost:8080 Log in with the admin username and the new password you set.
   # Open your browser and go to http://localhost:3000 to access Grafana.
      
