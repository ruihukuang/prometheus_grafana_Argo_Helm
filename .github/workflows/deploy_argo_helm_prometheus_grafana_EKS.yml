name: Deploy to EKS

on:
 workflow_dispatch:
      
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
         aws-region: ${{ secrets.REGION }}

    - name: Get Bastion Host Public IP
      id: bastion_ip
      run: |
        bastion_ip=$(aws cloudformation describe-stacks --stack-name BastionHostStack --query "Stacks[0].Outputs[?OutputKey=='BastionPublicIP'].OutputValue" --output text)
        echo "::set-output name=ip::$bastion_ip"

    - name: Create SSH key file
      run: |
        echo "${{ secrets.SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: SSH to Bastion Host and Update Kubeconfig
      env:
        BASTION_IP: ${{ steps.bastion_ip.outputs.ip }}
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$BASTION_IP << EOF
          set -x  # Enable command tracing
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name MyEKSCluster
          kubectl get nodes
          kubectl create namespace argocd
          kubectl create namespace monitoring
          #Install Argo CLI
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
          # install helm 
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          sudo chmod 700 get_helm.sh
          ./get_helm.sh
          #Add the Argo CD Helm Repository
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          #Install Argo CD Using Helm
          helm install argocd argo/argo-cd --namespace argocd --create-namespace
          # Wait for argocd-server to be deployed 
          echo "Waiting for argocd-server to be ready..."
          while ! kubectl get deployment argocd-server -n argocd -o jsonpath='{.status.readyReplicas}' | grep -q '1'; do
          echo "argocd-server is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # expose Argo CD API Server via an AWS Load Balancer, modify the argocd-server service.
          echo "Wait a few minutes for the Load Balancer of Argo CD API Server to provision"
          while ! kubectl patch svc argocd-server -n argocd --type='merge' -p '{"spec": {"type": "LoadBalancer"}}' ; do
          echo "Load Balancer of Argo CD API Server is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # Get the Load Balancer of Argo CD API Server URL
          echo $(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          # Access the Argo CD UI and get the password  kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          # Setting Up Prometheus and Grafana with Argo CD Graph
          #add the Prometheus community repository and update your local Helm repository cache
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          #Install the Prometheus Stack
          helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
          # Expose Grafana with a Load Balancer
          echo "Wait a few minutes for the Load Balancer of Grafana to provision"
          while ! kubectl patch svc my-kube-prometheus-stack-grafana -n monitoring --type='merge' -p '{"spec": {"type": "LoadBalancer"}}' ; do
          echo "Load Balancer of Grafana is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # Get the Grafana Load Balancer URL
          echo $(kubectl get svc my-kube-prometheus-stack-grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          # Expose prometheus with a Load Balancer
          echo "Wait a few minutes for the Load Balancer of prometheus to provision"
          while ! kubectl patch svc my-kube-prometheus-stack-prometheus   -n monitoring --type='merge' -p '{"spec": {"type": "LoadBalancer"}}' ; do
          echo "Load Balancer of prometheus is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # Get the prometheus Load Balancer URL
          echo $(kubectl get svc my-kube-prometheus-stack-prometheus -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          #Install metrics-server
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          echo "Waiting for metrics-server to be ready..."
          while ! kubectl get deployment metrics-server -n kube-system -o jsonpath='{.status.readyReplicas}' | grep -q '1'; do
          echo "Metrics Server is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          echo "Metrics Server is ready!"
          kubectl top nodes
          kubectl top pods --all-namespaces
          #To allow Prometheus to scrape ArgoCD metrics, create ServiceMonitor resources in the ArgoCD namespace. 
          #These YAML manifests specify the services to be monitored and must include a label that matches the Prometheus operator’s selector 
          #(in this case, the release name “my-kube-prometheus-stack”).
          curl -O https://raw.githubusercontent.com/ruihukuang/prometheus_grafana_Argo_Helm/main/argocd-service-monitors.yaml
          echo "Waiting for ArgoCD metrics to be ready..."
          while ! kubectl -n argocd apply -f argocd-service-monitors.yaml; do
          echo "ArgoCD metrics are not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          kubectl -n argocd get servicemonitors
        EOF

      
